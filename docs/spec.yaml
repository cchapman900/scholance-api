openapi: "3.0.0"
info:
  version: 0.1.0
  title: Scholance Project Service API
  description: |
    The Scholance API which serves all aspects related to projects. This may include
    projects themselves, submissions and assets
  contact:
    name: Chris
    email: chris@scholance.com
    url: http://chrischapman.co
servers:
  - url: https://api.scholance.com/projects/v1/
paths:
  /projects:
    get:
      summary: List Projects
      description: List all projects with the given parameters
      tags:
        - Project
      operationId: listProjects
      parameters:
        - name: _limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
        - name: _page
          in: query
          description: pagination index
          required: false
          schema:
            type: integer
            format: int32
        - name: category
          in: query
          description: category to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: object
      responses:
        '200':
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '404':
          description: No projects found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Project
      description: Creates a new project
      tags:
        - Project
      operationId: createProject
      security:
        - Auth0AccessToken: []
      requestBody:
        description: Project to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProject'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid user type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{project_id}:
    parameters:
      - name: project_id
        in: path
        description: ID of project
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
    get:
      summary: Get Project
      description: Returns a project based on a single ID
      tags:
        - Project
      operationId: getProject
      responses:
        '200':
          description: project response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Project
      description: Update an existing project
      tags:
        - Project
      operationId: updateProject
      security:
        - Auth0AccessToken: []
      requestBody:
        description: Project to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProject'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Project
      description: Deletes a single project based on the ID supplied
      tags:
        - Project
      operationId: deleteProject
      security:
        - Auth0AccessToken: []
      responses:
        '204':
          description: Project deleted
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{project_id}/status:
    parameters:
      - name: project_id
        in: path
        description: ID of project
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
    put:
      summary: Select project submission
      description: Select project submission
      tags:
        - Project
      operationId: updateProjectStatus
      security:
        - Auth0AccessToken: []
      requestBody:
        description: Project to be updated
        required: true
        content:
          application/json:
            schema:
              properties:
                status:
                  type: string
                  example: "complete"
                selectedEntry:
                  type: string
                  example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{project_id}/supplemental-resources/file:
    parameters:
      - name: project_id
        in: path
        description: ID of project
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
    post:
      summary: Add supplemental resource
      description: Add a supplemental resource to a project
      tags:
        - Asset
      operationId: createSupplementalResourceFile
      security:
        - Auth0AccessToken: []
      requestBody:
        description: Resource to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
      responses:
        '201':
          description: Asset created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{project_id}/supplemental-resources/{asset_id}:
    parameters:
      - name: project_id
        in: path
        description: ID of project
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
      - name: asset_id
        in: path
        description: ID of asset
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
    get:
      summary: Get Supplemental Resource
      description: >-
        Returns a single Supplemental Resource from a Project. Actually, this might actually need to
        be the actual file content
      tags:
        - Asset
      operationId: getSupplementalResource
      security:
        - Auth0AccessToken: []
      responses:
        '200':
          description: resource response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Supplemental Resource
      description: Delete a supplemental resource
      tags:
        - Asset
      operationId: deleteSupplementalResource
      security:
        - Auth0AccessToken: []
      responses:
        '204':
          description: Resource deleted
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{project_id}/entries:
    parameters:
      - name: project_id
        in: path
        description: ID of project
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
    post:
      summary: Sign up for a project
      description: Submit or resubmit completed work to a project
      tags:
        - Entry
      operationId: projectSignup
      security:
        - Auth0AccessToken: [manage:entry]
      responses:
        '204':
          description: Successful signup
        '400':
          description: Invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{project_id}/entries/{user_id}:
    parameters:
      - name: project_id
        in: path
        description: ID of project
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
      - name: user_id
        in: path
        description: ID of user
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
    get:
      summary: Get entry
      description: Get a specific entry to a project
      tags:
        - Entry
      operationId: getEntry
      security:
        - Auth0AccessToken: []
      responses:
        '200':
          description: Successful submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Project Signoff
      description: Sign off of a project
      tags:
        - Entry
      operationId: projectSignoff
      security:
        - Auth0AccessToken: []
      responses:
        '204':
          description: Sucessful signoff
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{project_id}/entries/{user_id}/submission-status:
    patch:
      summary: Submit or resubmit to a project
      description: Submit or resubmit completed work to a project
      tags:
        - Entry
      operationId: projectSubmission
      security:
        - Auth0AccessToken: []
      requestBody:
        description: Completed work
        required: true
        content:
          application/json:
            schema:
              properties:
                submissionStatus:
                  type: string
                  example: active
      responses:
        '200':
          description: Successful submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{project_id}/entries/{user_id}/assets:
    parameters:
      - name: project_id
        in: path
        description: ID of project
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
      - name: user_id
        in: path
        description: ID of the user, and subsequently the entry_id
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
    post:
      summary: Create an Entry Asset
      description: Creates a non-file Asset (text, link, etc) to be included in a Entry
      tags:
        - Entry
        - Asset
      operationId: createEntryAsset
      security:
        - Auth0AccessToken: []
      requestBody:
        description: Asset
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Asset'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{project_id}/entries/{user_id}/assets/file:
    parameters:
      - name: project_id
        in: path
        description: ID of project
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
      - name: user_id
        in: path
        description: ID of the user, and subsequently the entry_id
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
    post:
      summary: Create an Entry Asset from a file
      description: Creates a file Asset (image) to be included in an Entry
      tags:
        - Entry
        - Asset
      operationId: createEntryAssetFile
      security:
        - Auth0AccessToken: []
      requestBody:
        description: Asset
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssetFileUpload'
      responses:
        '201':
          description: Successful upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{project_id}/entries/{user_id}/assets/{asset_id}:
    parameters:
      - name: project_id
        in: path
        description: ID of project to delete
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
      - name: user_id
        in: path
        description: ID of the user, and subsequently the entry_id
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
      - name: asset_id
        in: path
        description: ID of asset
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
    delete:
      summary: Delete an Entry Asset
      description: Removes an Asset from a project entry
      tags:
        - Entry
        - Asset
      operationId: deleteEntryAsset
      security:
        - Auth0AccessToken: []
      responses:
        '204':
          description: Successful signoff
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{project_id}/entries/{user_id}/comments:
    parameters:
      - name: project_id
        in: path
        description: ID of project
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
      - name: user_id
        in: path
        description: ID of the user, and subsequently the entry_id
        required: true
        schema:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
    post:
      summary: Create an Entry Comment
      description: Comment on a Project Entry
      tags:
        - Entry
        - Message
      operationId: createEntryComment
      security:
        - Auth0AccessToken: []
      requestBody:
        description: Message
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    NewProject:
      properties:
        title:
          type: string
          example: "We need a logo"
        summary:
          type: string
          example: "We need a cutting-edge new logo for our new business"
        category:
          type: string
          example: Graphic Design
        subCategory:
          type: string
          example: Graphic Design
        fullDescription:
          type: string
          example: >-
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed pulvinar
            euismod ipsum ut pharetra. Fusce non quam nec mi tincidunt ornare. In
            gravida id ante in gravida. Nunc tempor dui tempus ultrices rutrum.
            Curabitur ante dui, ultrices id condimentum ultricies, bibendum eget
            erat. Morbi id condimentum ligula, in pulvinar neque. Curabitur lectus
            diam, imperdiet ut neque eu, varius porta diam. Suspendisse id pellentesque
            metus, sit amet ultricies risus. Nunc imperdiet volutpat lectus, ac viverra
            magna tempus aliquam. Aliquam iaculis orci sed erat fringilla, et finibus
            purus porta. Duis ultrices odio sit amet cursus blandit. Duis sit amet
            purus ex. Ut auctor libero felis, eu tincidunt nisl finibus nec.
        specs:
          type: array
          items:
            type: string
        deliverables:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              mediaType:
                type: array
                items:
                  type: string
        deadline:
          type: string
      required:
        - title
        - summary

    Project:
      allOf:
        - $ref: '#/components/schemas/NewProject'
      properties:
        _id:
          type: string
          format: ObjectId
          example: '507f1f77bcf86cd799439011'
        liaison:
          $ref: '#/components/schemas/Liaison'
        organization:
          $ref: '#/components/schemas/Organization'
        supplementalResources:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
        discussionBoard:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        status:
          type: string
          example: complete
        selectedEntry:
          type: string
          example: '507f1f77bcf86cd799439011'
      required:
        - _id
        - liaison
        - organization

    User:
      required:
        - _id
        - name
        - userType
      properties:
        _id:
          type: string
          example: '59e5852830b8f53496f8e8ec'
        name:
          type: string
          example: 'John Doe'
        userType:
          type: string
          enum:
            - student
            - business
        email:
          type: string
          example: johndoe@example.com
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        meta:
          properties:
            created:
              type: string
              format: date-time
              example: "2017-07-21T17:32:28Z"
            status:
              type: string
              enum:
                - active
                - suspended

    Student:
      allOf:
        - $ref: '#/components/schemas/User'

    Liaison:
      allOf:
        - $ref: '#/components/schemas/User'

    Organization:
      properties:
        _id:
          type: string
          format: ObjectId
          example: '507f1f77bcf86cd799439011'
        name:
          type: string
          example: "Acme Inc."
      required:
        - _id
        - name

    Entry:
      description: >-
        A Student entry to a project. This is created when a Student signs up and serves as a
        container for the Assets that will be submitted upon submission
      required:
        - student
      properties:
        student:
          $ref: '#/components/schemas/Student'
        commentary:
          type: string
          example: >-
            Mumblecore bicycle rights neutra locavore forage keffiyeh tumblr four loko pinterest
            asymmetrical farm-to-table tote bag craft beer sartorial. Fam man braid banh mi, try-hard
            cliche hell of letterpress. Taiyaki iPhone yr, wolf vinyl hammock pitchfork organic
            flexitarian yuccie next level meggings fanny pack whatever.
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
        status:
          type: string
          example: 'submitted'

    NewAsset:
      description: >-
        A photo, video, link or text object as used in a project entry or supplemental resource
      required:
        - name
        - mediaType
      properties:
        name:
          type: string
          example: "Our Logo"
        mediaType:
          type: string
          example: 'image'
          enum:
            - 'image'
            - 'link'
            - 'video'
            - 'text'
        uri:
          type: string
          example: s3://bucket-name/path/
        text:
          type: string
          example: >-
            Mumblecore bicycle rights neutra locavore forage keffiyeh tumblr four loko pinterest
            asymmetrical farm-to-table tote bag craft beer sartorial. Fam man braid banh mi, try-hard
            cliche hell of letterpress. Taiyaki iPhone yr, wolf vinyl hammock pitchfork organic
            flexitarian yuccie next level meggings fanny pack whatever.

    Asset:
      allOf:
        - $ref: '#/components/schemas/NewAsset'
      required:
        - _id
      properties:
        _id:
          type: string
          format: ObjectId
          example: '507f1f77bcf86cd799439011'

    AssetFileUpload:
      required:
        - name
        - file
      properties:
        name:
          type: string
        file:
          type: string
          format: base64encoded
          example: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+P+/HgAFhAJ/wlseKgAAAABJRU5ErkJggg=="

    NewMessage:
      description:
        A comment or direct message
      required:
        - text
        - author
      properties:
        text:
          type: string
        author:
          $ref: '#/components/schemas/User'

    Message:
      allOf:
        - $ref: '#/components/schemas/NewMessage'
      required:
        - _id
      properties:
        _id:
          type: string
          format: ObjectId
          example: '507f1f77bcf86cd799439011'
        votes:
          properties:
            total:
              type: number
            record:
              type: array
              items:
                $ref: '#/components/schemas/Vote'

    Vote:
      properties:
        voter:
          $ref: '#/components/schemas/User'
        value:
          type: number

    AccessTokenEncoded:
      type: string
      description: See AccessTokenDecoded for the content that exists in this
      example: >-
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o"

    AccessToken:
      description: >-
        This is a JWT that is passed in the Authorization header from a successful login
        through Auth0.
        This is actually passed in an encoded string format.
      properties:
        iss:
          description: "issuer: string or array of strings of valid values for the iss field"
          type: string
          example: 'https://scholance.auth0.com/'
        sub:
          type: string
          example: "auth0|59e5852860b8f53896e8e8ec"
        aud:
          type: array
          items:
            type: string
            example:
              'https://auth.scholance.com'
        iat:
          type: number
          example: 1521602109
        exp:
          type: number
          example: 1521609309
        azp:
          type: string
          example: YfWGuRfIUTmPX8dhgqAfSr65HW68VrEM
        scope:
          type: string
          example: 'openid profile manage:submission'

    IDToken:
      description: >-
        This is a standardized OIDC id_token which contains user information.
        See http://openid.net/connect/ for more information
      properties:
        header:
          properties:
            typ:
              type: string
              example: JWT
            alg:
              type: string
              example: HS256
        payload:
          required:
          - iss
          - sub
          - aud
          - exp
          - iat
          properties:
            iss:
              description: >-
                Issuer Identifier for the Issuer of the response. The iss value is a case sensitive
                URL using the https scheme that contains scheme, host, and optionally, port number
                and path components and no query or fragment components.
              type: string
              example: 'https://scholance.auth0.com/'
            sub:
              description: >-
                Subject Identifier. A locally unique and never reassigned identifier within the
                Issuer for the End-User, which is intended to be consumed by the Client, e.g.,
                24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4. It MUST NOT exceed 255
                ASCII characters in length. The sub value is a case sensitive string.
              type: string
              example: auth0|59e5852860b8f53896e8e8ec
            aud:
              description: >-
                Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0
                client_id of the Relying Party as an audience value. It MAY also contain identifiers
                for other audiences. In the general case, the aud value is an array of case sensitive
                strings. In the common special case when there is one audience, the aud value MAY
                be a single case sensitive string.
              type: string
              example: zwLwultk9tCRKQ5aM02AopBIhoF18sT8
            iat:
              description: >-
                Time at which the JWT was issued. Its value is a JSON number representing the
                number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
              type: string
              example: 1521084611
            exp:
              description: >-
                Expiration time on or after which the ID Token MUST NOT be accepted for processing.
                The processing of this parameter requires that the current date/time MUST be before
                the expiration date/time listed in the value. Implementers MAY provide for some
                small leeway, usually no more than a few minutes, to account for clock skew. Its
                value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z
                as measured in UTC until the date/time. See RFC 3339 [RFC3339] for details regarding
                date/times in general and UTC in particular.
              type: string
              example: 1521120611
            user_id:
              type: string
              example: "auth0|59e5852860b8f53896e8e8ec"
            name:
              type: string
              example: cc3989@tc.columbia.edu
            nickname:
              type: string
              example: cc3989@tc.columbia.edu
            email:
              type: string
              example: cc3989@tc.columbia.edu
            email_verified:
              type: string
              example: true
            https://scholance.auth0.com/roles:
              description: Namespaced custom properties
              type: array
              items:
                type: string
                example: student
        signature:
          type: string
          example: secret12345


    Error:
      required:
        - message
      properties:
        message:
          type: string
          example: "An unexpected error occured"
        code:
          type: integer
          format: int32
          example: 1000
  securitySchemes:
    Auth0AccessToken:
      type: http
      scheme: bearer
